#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr 13 15:22:12 2021

@author: sergio
"""

# Creemos ahora una función que dada una frase acabada en punto, 
#  nos devuelva si contiene o no la letra "a" haciendo uso de un bucle while"

def contains_a(sentence):
    i = 0
    while sentence[i] != ".":
        if sentence[i] == "a":
            return True
        i+=1
    return False

contains_a("El erizo es bonito.")

contains_a("El elefante es gigante.")

"""
Generalizad la función contains_a() a una función llamada contains_letter() 
que devuelva si una frase cualquiera (no necesariamente acabada en punto)
 contiene o no la letra indicada también por el usuario. Tenéis que hacerlo 
 únicamente con operadores de decisión e iteración. No vale usar ningún
 método existente de string.
"""
def contains_letter(sentece, letter):
    for c in sentece:
        if c == letter:
            return True
        return False
    
    contains_letter("Mi amigo es muy inteligente, pero un poco pesado", "t")
    
   # Funciones recursivas
   
   def powers(x, n):
       if x ** n> 1000000:
           return x ** n
       print( x ** n)
       powers(x, n + 1)
       
powers(2,1)
    
"""
Crear funcion recursiva que lleve a cabo una cuenta atrás
"""

def countdown(n):
    """
    Cuenta atrás recursiva
    Args:
        n: Número entero positivo
    Returns:
    """
    if n == 0:
        return 0
    print(n)
    return countdown(n-1)

countdown(15)


"""
Vamos a crear una función recursiva que cacule el factorial de un número
entero positivo
"""

def factorial(n):
    """
    Calcula el factorial de un número positivo
    ----------
    Args:
        n = Número entero positivo
    Returns:
        Factorial de n
    """
    if n == 0:
        return 1
    return n * factorial(n-1)


factorial(5)

"""
Queremos una función que nos imprima el término  i -ésimo de la sucesión de
 Fibonacci. Es decir, nosotros le indicamos el índice del término y la
 función nos devuelve el valor de dicho término.
"""

def Fibonacci(index):
    if index == 0 or index == 1:
        return 1
    return Fibonacci(index -1) + Fibonacci(index -2)

Fibonacci(index = 25)
    

"""
Vamos a crear una función que resuelva ecuaciones de primer 
grado de la forma $Ax + B = 0$ siempre que $A\ne 0$.
"""
def equation(A,B):
    """
    Resuelve ecuaciones de primer grado de la forma Ax + B = 0
    Args:
        A: Número real (coeficiente de x)
        B: Número real (término independiente)
    Returns:
        x: Solución de la ecuación de primer grado
    """  
    if A != 0:
        x = -B / A
        return x
    else:
        print("No has introducido una ecuación de primer grado")
      
equation(2, 3)


